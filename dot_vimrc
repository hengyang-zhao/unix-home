" DEFAULT VIMRC FILE BEGINS
"
" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2006 Aug 12
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
	 	\ | wincmd p | diffthis
"
" END OF DEFAULT VIMRC FILE

colorscheme koehler

set mouse=
set ruler
set number
set nowrap

set tabstop=4
set shiftwidth=4
set shiftround
set expandtab

set autoindent

set nobackup
set showmatch
set formatoptions+=mM
set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P

nmap <C-p> :tabprevious<CR>
nmap <C-n> :tabnext<CR>

nmap <Leader>sd :%s/ \+$//g<CR>
nmap <Leader>ss / \+$<CR>

nmap <Leader>t~ :tabedit ~/<CR>
nmap <Leader>t. :tabedit .<CR>
nmap <Leader>tn :tabedit<CR>

nmap <Leader>h~ :split ~/<CR>
nmap <Leader>h. :split .<CR>
nmap <Leader>hn :split<CR>

nmap <Leader>v~ :vsplit ~/<CR>
nmap <Leader>v. :vsplit .<CR>
nmap <Leader>vn :vsplit<CR>

function Lookup()
    let word = expand("<cword>")
    let tmpfile = tempname()
    call system('dict "' . word . '" > ' . tmpfile)
    execute("tabedit " . tmpfile)
endfunction

map <Leader>d :call Lookup()<CR>

nmap <C-h> zh
nmap <C-L> zl

nmap <Up> <C-y>
nmap <Down> <C-e>
nmap <Left> 4zh
nmap <Right> 4zl

nmap <Leader>m :make<CR>

au BufNewFile,BufRead *.cu set cindent
set cinoptions=>s,e0,n0,f0,{0,}0,^0,L-1,:0,=s,l0,b0,g0,hs,N-s,ps,ts,is,+s,c3,C0,/0,(2s,us,U0,w0,W0,k0,m0,j0,J0,)20,*70,#0

" vim: set ft=vim:
